@using BlazorToDoApp.Models
@inject IJSRuntime JsRuntime

<fieldset class="item">
    <input type="checkbox" class="checkbox" id="@Model.Id" @onchange="ToggleCheckbox" />
    <label title="@(Model.Checked ? "Mark as not completed" : "Mark as completed")" for="@Model.Id" class="@(Model.Checked ? "checkbox-label-checked" : "checkbox-label")">
        <span class="check-sign"></span>
    </label>
    <textarea maxlength="255" id=@_dynamicId class="@(Model.Checked ? "todo-item-text-crossed" : "todo-item-text")" @oninput="EditTaskText" onkeypress="return event.keyCode!=13" onresize="window.methods.test(event)" onload="window.methods.test" @bind=@Model.Text>@Model.Text</textarea>
    <button title="Delete task" class="delete-button" @onclick="RemoveTodoItem"></button>
    <legend class="date">@Model.Date</legend>
</fieldset>



<br />

@code {

    [Parameter]
    public TodoItemModel Model { get; set; }

    [Parameter]
    public EventCallback<Tuple<TodoItemModel, string>> UpdateHappened { get; set; }

    private string _dynamicId = string.Empty;

    public static event Func<Task> OnResize;

    [JSInvokable]
    public static async void ResizedWindow()
    {
        await OnResize?.Invoke();
    }

    private void ToggleCheckbox()
    {
        Model.Checked = !Model.Checked;
        UpdateHappened.InvokeAsync(new Tuple<TodoItemModel, string>(Model, "toggle"));
    }

    private void RemoveTodoItem()
    {
        UpdateHappened.InvokeAsync(new Tuple<TodoItemModel, string>(Model, "remove"));
    }

    async Task EditTaskText(ChangeEventArgs args)
    {
        var text = args.Value.ToString().Replace("\n", " ");
        Model.Text = text;

        await UpdateHappened.InvokeAsync(new Tuple<TodoItemModel, string>(Model, ""));

          await JsRuntime.InvokeVoidAsync("methods.resize", $"Text{Model.Id}");

        if (text == string.Empty)
            RemoveTodoItem();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
                        await JsRuntime.InvokeVoidAsync("methods.resize", $"Text{Model.Id}");
                await JsRuntime.InvokeVoidAsync("methods.onLoad");
        }
    }

    private async Task BrowserHasResized()
    {
        await JsRuntime.InvokeVoidAsync("methods.resize", $"Text{Model.Id}");
    }

    protected override void OnInitialized()
    {
        OnResize += BrowserHasResized;
        _dynamicId = ("Text" + Model.Id);
    }
}
