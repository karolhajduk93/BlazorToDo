@inject ISyncLocalStorageService localStorage
@using System.Net.Http
@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider

<div id="myModal" class="modal">
    <div class="modal-content">
        <button class="close" @onclick="ClosePopup">&times;</button>

        <label class="switch">
            <input type="checkbox" id="togBtn" @onchange="LoginRegisterToggle">
            <div class="slider round">
                <span class="on"></span>
                <span class="off"></span>
            </div>
        </label>

        <input class="input @UserDisplay " maxlength="60" placeholder="Username" required @bind="@User.Username" @onclick="@(() => UserDisplay = "touched-user")" />
        <input type="password" class="input @PasswordDisplay" maxlength="60" placeholder="Password" minlength="8" required @bind="@User.Password" @onclick="@(() => PasswordDisplay = "touched-password")" />
        <input type="email" class="input @EmailDisplay @EmailHidden" maxlength="60" placeholder="Email" required @bind="@User.Email" @onclick="@(() => @EmailDisplay = "touched-email")" />

        <button type="submit" class="submit" @onclick="Submit">@popupState</button>
        <span class="verification-error">@ErrorText</span>
    </div>
</div>


@code {

    string EmailDisplay;
    string PasswordDisplay;
    string UserDisplay;
    string ErrorText = "";
    string EmailHidden = "email-hidden";
    public enum PopupState { Login, Register }
    PopupState popupState = PopupState.Login;


    public UserModel User = new();
    UserDto userDto; /////////////////have to map USer to userDto

    [Parameter]
    public EventCallback Close { get; set; }

    //[Parameter]
    //public EventCallback<Tuple<UserModel, PopupState>> SendData { get; set; }

    private void LoginRegisterToggle()
    {
        popupState = popupState == PopupState.Login ? PopupState.Register : PopupState.Login;
        User.Email = "";
        EmailDisplay = "";
        EmailHidden = EmailHidden == "email-hidden" ? "email-visible" : "email-hidden";
    }

    async Task ClosePopup()
    {
        await Close.InvokeAsync();
    }

    async Task Submit()
    {

        ErrorText = "";
        if (string.IsNullOrWhiteSpace(User.Username))
        {
            ErrorText = "Provide Username";
            return;
        }
        else if (string.IsNullOrWhiteSpace(User.Password))
        {
            ErrorText = "Provide Password";
            return;
        }
        else if (User.Password.Length < 8)
        {
            ErrorText = "Password has to be at least 8 characters long";
            return;
        }
        else if (popupState.Equals(PopupState.Register) && !User.Email.Contains('@'))
        {
            ErrorText = "Your email should include @";
            return;
        }
        else if (popupState.Equals(PopupState.Register) && User.Email.EndsWith('@'))
        {
            ErrorText = "Your email shouldn't end with @";
            return;
        }

        if (popupState.Equals(PopupState.Register))
        {
            await Register(User.MapToDto());
        }
        else if (popupState.Equals(PopupState.Login))
        {
            await Login(User.MapToDto());
        }

    }


    private async Task Register(UserDto userDto)
    {

    }

    private async Task Login(UserDto userDto)
    {

        //if (User.Username != request.Username)
        //{
        //    ErrorText = "User not found";
        //}

        //if (VerifyPasswordHash(request.Password, User.PasswordHash, User.PasswordSalt) != true)
        //{
        //    ErrorText = "Wrong password";
        //}

        //string token = CreateToken(User);
        Console.WriteLine("HERE");
        Console.WriteLine(userDto.Username + "-------------" + userDto.Password);
        HttpResponseMessage result = await Http.PostAsJsonAsync("https://localhost:5003/api/auth/login", userDto);

        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadAsStringAsync();
            Console.WriteLine(token);
            localStorage.SetItem("token", token);
            await authStateProvider.GetAuthenticationStateAsync();
            await Close.InvokeAsync();
        }
        else
        {
            Console.WriteLine(":(");
            ErrorText = await result.Content.ReadAsStringAsync();
        }

    }

  
}