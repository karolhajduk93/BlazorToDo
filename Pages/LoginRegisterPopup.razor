
<div id="myModal" class="modal">
    <div class="modal-content">
        <button class="close" @onclick="ClosePopup">&times;</button>

        <label class="switch">
            <input type="checkbox" id="togBtn" @onchange="LoginRegisterToggle">
            <div class="slider round">
                <span class="on"></span>
                <span class="off"></span>
            </div>
        </label>

        <input class="input @UserDisplay " maxlength="60" placeholder="Username"  required  @bind="@User.UserName" @onclick="@(() => UserDisplay = "touched-user")"/>
        <input type="password" class="input @PasswordDisplay" maxlength="60" placeholder="Password"  minlength="8" required @bind="@User.Password" @onclick="@(() => PasswordDisplay = "touched-password")"/>
        <input type="email" class="input @EmailDisplay @EmailHidden" maxlength="60" placeholder="Email" required @bind="@User.Email" @onclick="@(() => @EmailDisplay = "touched-email")"/>

        <button type="submit" class="submit" @onclick="Submit">@popupState</button>
        <span class="verification-error">@ErrorText</span>
    </div>
</div>


@code {

    string EmailDisplay;
    string PasswordDisplay;
    string UserDisplay;
    string ErrorText = "";
    string EmailHidden = "email-hidden";
    enum PopupState { Login, Register }
    PopupState popupState = PopupState.Login;

    UserModel User = new();

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public EventCallback SendData { get; set; }

    private void LoginRegisterToggle()
    {
        popupState = popupState == PopupState.Login ? PopupState.Register : PopupState.Login;
        EmailHidden = EmailHidden == "email-hidden" ? "email-visible" : "email-hidden";
    }

    async Task ClosePopup()
    {
        await Close.InvokeAsync();
    }

    async Task Submit()
    {

        ErrorText = "";

        switch (popupState)
        {
            case PopupState.Login:
                String.IsNullOrWhiteSpace(User.UserName); ///////////
                break;
            case PopupState.Register:
                break;

        }

        await SendData.InvokeAsync();
    }


    private void Working()
    {
        Console.WriteLine("Its really working");
    }
}