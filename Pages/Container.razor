@using BlazorToDoApp.Models
@inject ISyncLocalStorageService localStorage
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider

<div class="container">
    <div class="upper-section">
        <h2 class="upper-section-title">
            <input maxlength="80" class="current-list-title" @bind="@_toDoList.ListName" @oninput="UpdateLocalListName" />
            <div class="title-date">@DateTime.Now.ToString("D")</div>
        </h2>
        <div class="login-save-group">
            <AuthorizeView Roles="Iron Man">
                <NotAuthorized>
                    <button title="Log In" class="logged-out-button" @onclick="@(() => _showPopup = true)"></button>
                    @if (_showPopup is true)
                    {
                        <LoginRegisterPopup Close="() => _showPopup = false" />
                    }

                    @if (_justLoggedOut)
                    {
                        <div class="info-modal">
                            <div class="logged-out-text">You logged out</div>
                        </div>
                    }

                </NotAuthorized>
                <Authorized>
                    <button title="Save this list" class="save-button"></button>
                    <button title="Log Out" class="logged-in-button" @onclick="Logout"></button>
  
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div class="add_task_block">
        <button title="Add a task" class="add" @onclick="AddTodo"> +</button>
        <input class="input" maxlength="255" placeholder="Add a task" @bind="_todoItemText" @onkeyup="KeyboardEventHandler" />
    </div>

    <div class="list">

        @foreach (var item in _toDoList.ToDoItems)
        {
            <TodoItem @key="@item.ToDoItemId" Model="@item" UpdateHappened="RerenderForUpdate"></TodoItem>
        }

        @if (_toDoList.CompletedItems.Any())
        {
            <div class="completed">
                <button class="dropdown-completed" id="dropdown-button" @onclick="HideShowCompletedTasks">
                    <div class=@_dropdownCompletedSign></div>
                </button>
                <label for="dropdown-button">Completed</label>
                <span class="number">@_toDoList.CompletedItems.Count</span>
            </div>
        }
        <div class="@_completedContainer">
            @foreach (var item in _toDoList.CompletedItems)
            {
                <TodoItem @key="@item.ToDoItemId" Model="@item" UpdateHappened="RerenderForUpdate"></TodoItem>
            }
        </div>
        <button @onclick="SaveToApi">SaveToAPI</button>
    </div>
</div>

<button class="list-of-lists-button" @onclick="HideShowListOfLists"></button>
<div id="listOfLists" class=@(_listOfLists = _listOfListsVisible ? "list-of-lists-visible" : "list-of-lists-hidden")>
    <AuthorizeView Roles="Iron Man">
        <NotAuthorized>
            <p class="login-incentive">(NO CONTENT)</p>
            <p class="login-incentive">Log In to access your list</p>
        </NotAuthorized>
        <Authorized>
            @if (_toDoLists.IsNullOrEmpty())
            {
                <div class="list-of-lists-title">No list saved</div>
            }
            else
            {
                <div class="list-of-lists-title">Your lists</div>
                @foreach (var item in _toDoLists)
                {
                    <div class="list-of-lists-items">@item.ListName</div>
                }
            }

        </Authorized>
    </AuthorizeView>
</div>




@code {

    private List<ToDoListModel> _toDoLists;
    private ToDoListModel _toDoList;
    //private UserModel _user;

    private string _todoItemText = string.Empty;
    private bool _completedVisible = true;
    private bool _listOfListsVisible = true;
    private bool _loggedIn = false;
    private bool _showPopup = false;
    private bool _justLoggedOut = false;

    private string _dropdownCompletedSign = "dropdown-sign-visible";
    private string _completedContainer = "completed-container-show";

    private string _listOfLists = "list-of-lists-visible";

    protected override void OnInitialized()
    {
        _toDoList = localStorage.GetItem<ToDoListModel>("list") ?? new ToDoListModel();
        _toDoLists = new()
        {
            new ToDoListModel() { ListName = "First List with veeeeeeeeeeeeeeeeeeeeeery long title" },
            new ToDoListModel() { ListName = "Second List " }
        };
        AppState.OnResize += ShowHideListOfListsOnResize;


        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {  
            await JsRuntime.InvokeVoidAsync("methods.onLoad");
        }
    }

    private async Task Logout()
    {
        _justLoggedOut = true;
        StateHasChanged();
        localStorage.RemoveItem("token");



        await authStateProvider.GetAuthenticationStateAsync();
        //StateHasChanged();
    }

    public async Task SaveToApi()
    {
        /*_toDoLists = await Http.GetFromJsonAsync<List<ToDoListModel>>("https://localhost:5003/api/ToDoList");
        _toDoLists.ForEach(list => Console.WriteLine(list.ListName));
        _toDoLists.ForEach(list => list.ToDoItems.ForEach(item => Console.WriteLine("{" + item.Text + "}")));*/
        var x = new ToDoListModel()
        {
            ToDoItems =
{
                new ToDoItemModel("Task 1") {Checked = true},
                new ToDoItemModel("Task 2") {Checked = true},
                new ToDoItemModel("Task 3"),
                new ToDoItemModel("Task 4"),
            }
        };
        Console.WriteLine("Here before tragedy.");
        var y = await Http.PostAsJsonAsync("https://localhost:5003/api/ToDoList", x);

        Console.WriteLine("==========" + x.Id);
    }

    private void RerenderForUpdate(Tuple<ToDoItemModel, string> update)
    {
        switch (update.Item2)
        {
            case "remove":
                _toDoList.ToDoItems.Remove(update.Item1);
                _toDoList.CompletedItems.Remove(update.Item1);
                break;
            case "toggle" when update.Item1.Checked:
                _toDoList.CompletedItems.Add(update.Item1);
                _toDoList.ToDoItems.Remove(update.Item1);
                break;
            case "toggle":
                _toDoList.ToDoItems.Add(update.Item1);
                _toDoList.CompletedItems.Remove(update.Item1);
                break;
        }

        UpdateLocalStorage("list", _toDoList);
    }

    private void ValidateUser(Tuple<UserModel, LoginRegisterPopup.PopupState> userInput)
    {

        //userInput.Item2.Equals

        //UpdateLocalStorage("user", userInput);
    }


    private void AddTodo()
    {
        if (_todoItemText == string.Empty) return;

        _toDoList.ToDoItems.Add(new ToDoItemModel(_todoItemText));
        UpdateLocalStorage("list", _toDoList);

        _todoItemText = string.Empty;
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            AddTodo();
    }

    private void HideShowCompletedTasks()
    {
        _completedVisible = !_completedVisible;
        _dropdownCompletedSign = _completedVisible ? "dropdown-sign-visible" : "dropdown-sign-hidden";
        _completedContainer = _completedVisible ? "completed-container-show" : "completed-container-hide";
    }

    private void HideShowListOfLists()
    {
        _listOfListsVisible = !_listOfListsVisible;
        _listOfLists = _listOfListsVisible ? "list-of-lists-visible" : "list-of-lists-hidden";
    }

    public void UpdateLocalStorage(string key, List<ToDoItemModel> list)
    {
        localStorage.SetItem(key, list);
    }

    public void UpdateLocalStorage(string key, ToDoListModel list)
    {
        localStorage.SetItem(key, list);
    }

    public async Task ShowHideListOfListsOnResize()
    {
        var width = Int32.Parse(await JsRuntime.InvokeAsync<string>("methods.getWindowWidth"));

        _listOfListsVisible = width > 1150 ? true : false;
        StateHasChanged();
    }

    public void ShowHideListOfListsOnClick()
    {
        _listOfListsVisible = !_listOfListsVisible;
    }

    public void UpdateLocalListName(ChangeEventArgs args)
    {
        Console.WriteLine("In method");
        var text = args.Value.ToString();
        Console.WriteLine(text);
        _toDoList.ListName = text;
        UpdateLocalStorage("list", _toDoList);

        StateHasChanged();
    }



}


