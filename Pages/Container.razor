@using BlazorToDoApp.Models
@inject ISyncLocalStorageService localStorage
@using System.Net.Http
@using System.Runtime.Serialization
@inject HttpClient Http

<div class="container">
    <div class="upper-section">
        <h2 class="upper-section-title">
            @_toDoList.ListName <br />
            <div class="title-date">@DateTime.Now.ToString("dddd, MMMM yyyy")</div>
        </h2>
        <div class="login-save-group">
            <button title="Save this list" class="@_saveButton"></button>
            <button title="Log In" class="login-button"></button>
        </div>
    </div>
    <div class="add_task_block">
        <button title="Add a task" class="add" @onclick="AddTodo"> +</button>
        <input class="input" maxlength="255" placeholder="Add a task" @bind="_todoItemText" @onkeyup="KeyboardEventHandler" />
    </div>

    <div class="list">

        @foreach (var item in _itemsToDo)
        {
            <TodoItem @key="@item.ToDoItemId" Model="@item" UpdateHappened="RerenderForUpdate"></TodoItem>
        }

        @if (_itemsDone.Any())
        {
            <div class="completed">
                <button class="dropdown-completed" id="dropdown-button" @onclick="HideShowCompletedTasks">
                    <div class=@_dropdownCompletedSign></div>
                </button>
                <label for="dropdown-button">Completed</label>
                <span class="number">@_itemsDone.Count</span>
            </div>
        }
        <div class="@_completedContainer">
            @foreach (var item in _itemsDone)
            {
                <TodoItem @key="@item.ToDoItemId" Model="@item" UpdateHappened="RerenderForUpdate"></TodoItem>
            }
        </div>
        <button @onclick="SaveToApi">SaveToAPI</button>
    </div>
</div>

<button class="list-of-lists-button" @onclick="HideShowListOfLists"></button> @*on button clicked show even if screen is small*@
<div class=@_listOfLists>
    <div class="list-of-lists-title">Your lists</div>
    @if (_loggedIn) @*authorizedviewhere instead of this if*@
    {
        //list of saved lists
    }
    else
    {
        <div class="login-incentive">You are not signed.<br/>Sign in to have access to all your lists from anywhere.</div>
    }
</div>






@code {

    private List<ToDoItemModel> _itemsToDo;
    private List<ToDoItemModel> _itemsDone;
    private List<ToDoListModel> _toDoLists;
    private ToDoListModel _toDoList;

    private string _todoItemText = string.Empty;
    private bool _completedVisible = true;
    private bool _listOfListsVisible = true;
    private bool _loggedIn = false;

    private string _dropdownCompletedSign = "dropdown-sign-visible";
    private string _completedContainer = "completed-container-show";
    private string _saveButton = "save-button-hidden";
    private string _listOfLists = "list-of-lists-visible";


    public async Task SaveToApi()
    {
        /*_toDoLists = await Http.GetFromJsonAsync<List<ToDoListModel>>("https://localhost:5003/api/ToDoList");
        _toDoLists.ForEach(list => Console.WriteLine(list.ListName));
        _toDoLists.ForEach(list => list.ToDoItems.ForEach(item => Console.WriteLine("{" + item.Text + "}")));*/
        var x = new ToDoListModel()
        {
            ToDoItems =
        {
                new ToDoItemModel("Task 1") {Checked = true},
                new ToDoItemModel("Task 2") {Checked = true},
                new ToDoItemModel("Task 3"),
                new ToDoItemModel("Task 4"),
            }
        };
        Console.WriteLine("Here before tragedy.");
        var y = await Http.PostAsJsonAsync("https://localhost:5003/api/ToDoList", x);

        Console.WriteLine("==========" + x.Id);
    }

    private void RerenderForUpdate(Tuple<ToDoItemModel, string> update)
    {
        switch (update.Item2)
        {
            case "remove":
                _itemsToDo.Remove(update.Item1);
                _itemsDone.Remove(update.Item1);
                break;
            case "toggle" when update.Item1.Checked:
                _itemsDone.Add(update.Item1);
                _itemsToDo.Remove(update.Item1);
                break;
            case "toggle":
                _itemsToDo.Add(update.Item1);
                _itemsDone.Remove(update.Item1);
                break;
        }

        UpdateLocalStorage("itemsToDo", _itemsToDo);
        UpdateLocalStorage("itemsDone", _itemsDone);
    }

    private void AddTodo()
    {
        if (_todoItemText == string.Empty) return;

        _itemsToDo.Add(new ToDoItemModel(_todoItemText));
        UpdateLocalStorage("itemsToDo", _itemsToDo);

        _todoItemText = string.Empty;
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            AddTodo();
    }

    private void EnableSaveList()
    {
        _saveButton = "save-button-hidden";
    }

    private void HideShowCompletedTasks()
    {
        _completedVisible = !_completedVisible;
        _dropdownCompletedSign = _completedVisible ? "dropdown-sign-visible" : "dropdown-sign-hidden";
        _completedContainer = _completedVisible ? "completed-container-show" : "completed-container-hide";
    }

    private void HideShowListOfLists()
    {
        _listOfListsVisible = !_listOfListsVisible;
        _listOfLists = _listOfListsVisible ? "list-of-lists-visible" : "list-of-lists-hidden";
    }

    public void UpdateLocalStorage(string key, List<ToDoItemModel> list)
    {
        localStorage.SetItem(key, list);
    }

    protected override void OnInitialized()
    {
        _itemsToDo = localStorage.GetItem<List<ToDoItemModel>>("itemsToDo") ?? new List<ToDoItemModel>();
        _itemsDone = localStorage.GetItem<List<ToDoItemModel>>("itemsDone") ?? new List<ToDoItemModel>();
        _toDoList = new ToDoListModel();
        _toDoList.ListName = "Alternative List Title";

        StateHasChanged();
    }

}


