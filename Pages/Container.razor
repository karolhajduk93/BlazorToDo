@using BlazorToDoApp.Models
@inject AppState AppState

<div class =" container">
    <div class="add_task_block">
        <button class="add" @onclick="AddTodo"> +</button>
        <input class="input" maxlength="255" placeholder="Add a task" @bind="_todoItemText" @onkeyup="KeyboardEventHandler" />
    </div>

    <div class="list">

        @foreach (var item in _items.Where(item => !item.Checked))
        {
            <TodoItem Model="item" UpdateHappened="(_ => StateHasChanged())"></TodoItem>
        }

        @if(_items.Count(item => item.Checked) > 0)
        {
            <div class="completed">
                <button class="dropdown-completed">
                    <div class="dropdown-sign"></div>
                </button>
                Completed
                <span class="number">@_items.Count(item => item.Checked)</span>
            </div>
        }

        @foreach (var item in _items.Where(item => item.Checked))
        {
            <TodoItem Model="item" UpdateHappened="(_ => StateHasChanged())"></TodoItem>
        }
    </div>
    

    }
</div>



@code {

    private List<TodoItemModel> _items;
    private TodoItem myItem;
    private string _todoItemText = string.Empty;
    

    private void AddTodo()
    {
        if (_todoItemText == string.Empty) return;
        _items.Insert(0, new TodoItemModel(_todoItemText));
        _todoItemText = string.Empty;
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            AddTodo();

    }

    protected override void OnInitialized()
    {
        _items = new List<TodoItemModel>();
        AppState.StateChange += ((sender, item) => StateHasChanged());
    }

}


